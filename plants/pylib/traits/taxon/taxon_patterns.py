from traiter.pylib.pipes import reject_match
from traiter.pylib.traits.pattern_compiler import Compiler

from . import taxon_action as act


def taxon_patterns():
    decoder = {
        ":": {"TEXT": {"IN": [":", ";"]}},
        "A.": {"TEXT": {"REGEX": act.ABBREV_RE}},
        "bad_prefix": {"ENT_TYPE": "bad_taxon_prefix"},
        "bad_suffix": {"ENT_TYPE": "bad_taxon_suffix"},
        "maybe": {"POS": {"IN": ["PROPN", "NOUN"]}},
        "binomial": {"ENT_TYPE": "binomial"},
        "monomial": {"ENT_TYPE": "monomial"},
        "higher_rank": {"ENT_TYPE": {"IN": act.HIGHER_RANK}},
        "subsp": {"ENT_TYPE": "subspecies_rank"},
        "var": {"ENT_TYPE": "variety_rank"},
        "subvar": {"ENT_TYPE": "subvariety_rank"},
        "f.": {"ENT_TYPE": "form_rank"},
        "subf": {"ENT_TYPE": "subform_rank"},
        "species_rank": {"ENT_TYPE": "species_rank"},
    }

    return [
        Compiler(
            label="singleton",
            on_match=act.SINGLE_TAXON_MATCH,
            decoder=decoder,
            patterns=[
                "monomial",
                "higher_rank  monomial",
                "species_rank monomial",
            ],
        ),
        Compiler(
            label="species",
            on_match=act.TAXON_MATCH,
            decoder=decoder,
            patterns=[
                "binomial{2}",
                "monomial monomial",
                "A. monomial",
            ],
        ),
        Compiler(
            label="subspecies",
            on_match=act.TAXON_MATCH,
            decoder=decoder,
            patterns=[
                "   binomial{2} subsp? monomial",
                "   binomial{2} subsp  maybe",
                "A. monomial    subsp? monomial",
                "A. monomial    subsp  maybe",
                "A. maybe       subsp? monomial",
                "A. maybe       subsp  maybe",
            ],
        ),
        Compiler(
            label="variety",
            on_match=act.TAXON_MATCH,
            decoder=decoder,
            patterns=[
                "   binomial{2}                var monomial",
                "   binomial{2} subsp monomial var monomial",
                "   binomial{2}                var maybe",
                "   binomial{2} subsp monomial var maybe",
                "A. monomial                   var monomial",
                "A. monomial    subsp monomial var monomial",
                "A. monomial                   var maybe",
                "A. monomial    subsp monomial var maybe",
                "A. monomial                   var monomial",
                "A. monomial    subsp monomial var monomial",
                "A. monomial                   var maybe",
                "A. monomial    subsp monomial var maybe",
                "A. maybe                      var monomial",
                "A. maybe       subsp monomial var monomial",
                "A. maybe                      var maybe",
                "A. maybe       subsp monomial var maybe",
                "A. maybe                      var monomial",
                "A. maybe       subsp monomial var monomial",
                "A. maybe                      var maybe",
                "A. maybe       subsp monomial var maybe",
            ],
        ),
        Compiler(
            label="subvariety",
            on_match=act.TAXON_MATCH,
            decoder=decoder,
            patterns=[
                "   binomial{2}                subvar monomial",
                "   binomial{2} var   monomial subvar monomial",
                "   binomial{2} subsp monomial subvar monomial",
                "   binomial{2}                subvar maybe",
                "   binomial{2} var   monomial subvar maybe",
                "   binomial{2} subsp monomial subvar maybe",
                "   binomial{2} var   maybe    subvar maybe",
                "   binomial{2} subsp maybe    subvar maybe",
                "   binomial{2} var   maybe    subvar monomial",
                "   binomial{2} subsp maybe    subvar monomial",
                "A. monomial                   subvar monomial",
                "A. monomial    var   monomial subvar monomial",
                "A. monomial    subsp monomial subvar monomial",
                "A. monomial                   subvar maybe",
                "A. monomial    var   monomial subvar maybe",
                "A. monomial    subsp monomial subvar maybe",
                "A. monomial    var   maybe    subvar maybe",
                "A. monomial    subsp maybe    subvar maybe",
                "A. monomial    var   maybe    subvar monomial",
                "A. monomial    subsp maybe    subvar monomial",
                "A. maybe                      subvar monomial",
                "A. maybe       var   monomial subvar monomial",
                "A. maybe       subsp monomial subvar monomial",
                "A. maybe                      subvar maybe",
                "A. maybe       var   monomial subvar maybe",
                "A. maybe       subsp monomial subvar maybe",
                "A. maybe       var   maybe    subvar maybe",
                "A. maybe       subsp maybe    subvar maybe",
                "A. maybe       var   maybe    subvar monomial",
                "A. maybe       subsp maybe    subvar monomial",
            ],
        ),
        Compiler(
            label="form",
            on_match=act.TAXON_MATCH,
            decoder=decoder,
            patterns=[
                "   binomial{2}                f. monomial",
                "   binomial{2} var   monomial f. monomial",
                "   binomial{2} subsp monomial f. monomial",
                "   binomial{2}                f. maybe",
                "   binomial{2} var   monomial f. maybe",
                "   binomial{2} subsp monomial f. maybe",
                "   binomial{2} var   maybe    f. maybe",
                "   binomial{2} subsp maybe    f. maybe",
                "   binomial{2} var   maybe    f. monomial",
                "   binomial{2} subsp maybe    f. monomial",
                "A. monomial                   f. monomial",
                "A. monomial    var   monomial f. monomial",
                "A. monomial    subsp monomial f. monomial",
                "A. monomial                   f. maybe",
                "A. monomial    var   monomial f. maybe",
                "A. monomial    subsp monomial f. maybe",
                "A. monomial    var   maybe    f. maybe",
                "A. monomial    subsp maybe    f. maybe",
                "A. monomial    var   maybe    f. monomial",
                "A. monomial    subsp maybe    f. monomial",
                "A. maybe                      f. monomial",
                "A. maybe       var   monomial f. monomial",
                "A. maybe       subsp monomial f. monomial",
                "A. maybe                      f. maybe",
                "A. maybe       var   monomial f. maybe",
                "A. maybe       subsp monomial f. maybe",
                "A. maybe       var   maybe    f. maybe",
                "A. maybe       subsp maybe    f. maybe",
                "A. maybe       var   maybe    f. monomial",
                "A. maybe       subsp maybe    f. monomial",
            ],
        ),
        Compiler(
            label="subform",
            on_match=act.TAXON_MATCH,
            decoder=decoder,
            patterns=[
                "   binomial{2}                subf monomial",
                "   binomial{2} var   monomial subf monomial",
                "   binomial{2} subsp monomial subf monomial",
                "   binomial{2}                subf maybe",
                "   binomial{2} var   monomial subf maybe",
                "   binomial{2} subsp monomial subf maybe",
                "   binomial{2} var   maybe    subf maybe",
                "   binomial{2} subsp maybe    subf maybe",
                "   binomial{2} var   maybe    subf monomial",
                "   binomial{2} subsp maybe    subf monomial",
                "A. monomial                   subf monomial",
                "A. monomial    var   monomial subf monomial",
                "A. monomial    subsp monomial subf monomial",
                "A. monomial                   subf maybe",
                "A. monomial    var   monomial subf maybe",
                "A. monomial    subsp monomial subf maybe",
                "A. monomial    var   maybe    subf maybe",
                "A. monomial    subsp maybe    subf maybe",
                "A. monomial    var   maybe    subf monomial",
                "A. monomial    subsp maybe    subf monomial",
                "A. maybe                      subf monomial",
                "A. maybe       var   monomial subf monomial",
                "A. maybe       subsp monomial subf monomial",
                "A. maybe                      subf maybe",
                "A. maybe       var   monomial subf maybe",
                "A. maybe       subsp monomial subf maybe",
                "A. maybe       var   maybe    subf maybe",
                "A. maybe       subsp maybe    subf maybe",
                "A. maybe       var   maybe    subf monomial",
                "A. maybe       subsp maybe    subf monomial",
            ],
        ),
        Compiler(
            label="bad_taxon",
            decoder=decoder,
            on_match=reject_match.REJECT_MATCH,
            patterns=[
                "bad_prefix :?    monomial",
                "bad_prefix :? A. monomial",
                "                 monomial    bad_suffix",
                "              A. monomial    bad_suffix",
                "bad_prefix :?    monomial    bad_suffix",
                "bad_prefix :? A. monomial    bad_suffix",
                "bad_prefix :?    binomial{2}",
                "                 binomial{2} bad_suffix",
                "bad_prefix :?    binomial{2} bad_suffix",
            ],
        ),
    ]


def multi_taxon_patterns():
    return [
        Compiler(
            label="multi_taxon",
            on_match=act.MULTI_TAXON_MATCH,
            decoder={
                "and": {"LOWER": {"IN": act.AND}},
                "taxon": {"ENT_TYPE": {"IN": act.TAXON_LABELS}},
            },
            patterns=[
                "taxon and taxon",
            ],
        )
    ]


def taxon_rename_patterns():
    return Compiler(
        label="taxon",
        on_match=act.RENAME_TAXON_MATCH,
        decoder={
            "taxon": {"ENT_TYPE": {"IN": act.TAXON_LABELS_PLUS}},
            "rank": {"ENT_TYPE": {"IN": act.ANY_RANK}},
        },
        patterns=[
            "rank* taxon",
        ],
    )
